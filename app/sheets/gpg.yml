---
:description: Generated sheet for gpg
:tags:
- community
:shortcuts:
  :defaults:
    Create a key: |2+

       gpg --gen-key


    Show keys: |2+

        To list a summary of all keys

          gpg --list-keys

        To show your public key

          gpg --armor --export

        To show the fingerprint for a key

          gpg --fingerprint KEY_ID

    Search for keys: |2+

        gpg --search-keys 'user@emailaddress.com'


    To Encrypt a File: |2+

        gpg --encrypt --recipient 'user@emailaddress.com' example.txt


    To Decrypt a File: |2+

        gpg --output example.txt --decrypt example.txt.gpg


    Export keys: |2+

        gpg --output ~/public_key.txt --armor --export KEY_ID
        gpg --output ~/private_key.txt --armor --export-secret-key KEY_ID

        Where KEY_ID is the 8 character GPG key ID.

        Store these files to a safe location, such as a USB drive, then
        remove the private key file.

          shred -zu ~/private_key.txt

    Import keys: |2+

        Retrieve the key files which you previously exported.

          gpg --import ~/public_key.txt
          gpg --allow-secret-key-import --import ~/private_key.txt

        Then delete the private key file.

          shred -zu ~/private_key.txt

    Revoke a key: |2+

        Create a revocation certificate.

          gpg --output ~/revoke.asc --gen-revoke KEY_ID

        Where KEY_ID is the 8 character GPG key ID.

        After creating the certificate import it.

          gpg --import ~/revoke.asc

        Then ensure that key servers know about the revokation.

          gpg --send-keys KEY_ID

    Signing and Verifying files: |2+

        If you are uploading files to launchpad you may also want to include
        a GPG signature file.

          gpg -ba filename

        or if you need to specify a particular key:

          gpg --default-key <key ID> -ba filename

        This then produces a file with a .asc extension which can be uploaded.
        If you need to set the default key more permanently then edit the
        file ~/.gnupg/gpg.conf and set the default-key parameter.

        To verify a downloaded file using its signature file.

        gpg --verify filename.asc

    Signing Public Keys: |2+

        Import the public key or retrieve it from a server.

          gpg --keyserver <keyserver> --recv-keys <Key_ID>

        Check its fingerprint against any previously stated value.

          gpg --fingerprint <Key_ID>

        Sign the key.

          gpg --sign-key <Key_ID>

        Upload the signed key to a server.

          gpg --keyserver <keyserver> --send-key <Key_ID>

    Change the email address associated with a GPG key: |2+

        gpg --edit-key <key ID>
        adduid

        Enter the new name and email address. You can then list the addresses with:

          list

        If you want to delete a previous email address first select it:

          uid <list number>

        Then delete it with:

          deluid

        To finish type:

          save

        Publish the key to a server:

          gpg --send-keys <key ID>

    Creating Subkeys: "\n  Subkeys can be useful if you don't wish to have your main
      GPG key\n  installed on multiple machines. In this way you can keep your\n  master
      key safe and have subkeys with expiry periods or which may be\n  separately
      revoked installed on various machines. This avoids\n  generating entirely separate
      keys and so breaking any web of trust\n  which has been established.\n\n    gpg
      --edit-key <key ID>\n\n  At the prompt type:\n\n    addkey\n\n  Choose RSA (sign
      only), 4096 bits and select an expiry period.\n  Entropy will be gathered.\n\n
      \ At the prompt type:\n\n    save\n\n  You can also repeat the procedure, but
      selecting RSA (encrypt only).\n  To remove the master key, leaving only the
      subkey/s in place:\n\n    gpg --export-secret-subkeys <subkey ID> > subkeys\n
      \   gpg --export <key ID> > pubkeys\n    gpg --delete-secret-key <key ID>\n\n
      \ Import the keys back.\n\n    gpg --import pubkeys subkeys\n\n  Verify the
      import.\n\n    gpg -K\n\n  Should show sec# instead of just sec.\n  \n"
    High-quality options for gpg for symmetric (secret key) encryption: "  \n  This
      is what knowledgable people consider a good set of options for \n  symmetric
      encryption with gpg to give you a high-quality result.\n  \n  gpg \\\n    --symmetric
      \\\n    --cipher-algo aes256 \\\n    --digest-algo sha512 \\\n    --cert-digest-algo
      sha512 \\\n    --compress-algo none -z 0 \\\n    --s2k-mode 3 \\\n    --s2k-digest-algo
      sha512 \\\n    --s2k-count 65011712 \\\n    --force-mdc \\\n    --pinentry-mode
      loopback \\\n    --armor \\\n    --no-symkey-cache \\\n    --output somefile.gpg
      \\\n    somefile # to encrypt\n    \n  gpg \\\n    --decrypt \\\n    --pinentry-mode
      loopback \\\n    --armor \\\n    --output somefile.gpg \\\n    somefile # to
      decrypt\n"
...
