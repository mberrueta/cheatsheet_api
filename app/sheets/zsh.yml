---
:description: Generated sheet for zsh
:tags:
- community
:shortcuts:
  :defaults:
    A plain old glob: |+
      print -l *.txt
      print -l **/*.txt

    Show text files that end in a number from 1 to 10: "print -l **/*<1-10>.txt\n\n"
    Show text files that start with the letter a: "print -l **/[a]*.txt\n\n"
    Show text files that start with either ab or bc: "print -l **/(ab|bc)*.txt\n\n"
    Show text files that don't start with a lower or uppercase c: "print -l **/[^cC]*.txt\n\n"
    Show only directories: "print -l **/*(/)\n\n"
    Show only regular files: "print -l **/*(.)\n\n"
    Show empty files: "print -l **/*(L0)\n\n"
    Show files greater than 3 KB: "print -l **/*(Lk+3)\n\n"
    Show files modified in the last hour: "print -l **/*(mh-1)\n\n"
    Sort files from most to least recently modified and show the last 3: "print -l
      **/*(om[1,3])\n\n"
    "`om` sort by modification date, `[1,3]` only first 3 files": "print -l **/*(.Lm-2mh-1om[1,3])\n\n"
    Show every directory that contain directory `.git`: "print -l **/*(e:'[[ -d $REPLY/.git
      ]]':)\n\n"
    Return the file name (t stands for tail): "print -l *.txt(:t)\n\n"
    Return the file name without the extension (r stands for remove_extension): "print
      -l *.txt(:t:r)\n\n"
    Return the extension: "print -l *.txt(:e)\n\n"
    Return the parent folder of the file (h stands for head): "print -l *.txt(:h)\n\n"
    Return the parent folder of the parent: "print -l *.txt(:h:h)\n\n"
    Return the parent folder of the first file: "print -l *.txt([1]:h)\n\n"
    Parameter expansion: |+
      files=(*.txt)          # store a glob in a variable
      print -l $files
      print -l $files(:h)    # this is the syntax we saw before
      print -l ${files:h}
      print -l ${files(:h)}  # don't mix the two, or you'll get an error
      print -l ${files:u}    # the :u modifier makes the text uppercase

    ":s modifier": |+
      variable="path/aaabcd"
      echo ${variable:s/bc/BC/}    # path/aaaBCd
      echo ${variable:s_bc_BC_}    # path/aaaBCd
      echo ${variable:s/\//./}     # path.aaabcd (escaping the slash \/)
      echo ${variable:s_/_._}      # path.aaabcd (slightly more readable)
      echo ${variable:s/a/A/}      # pAth/aaabcd (only first A is replaced)
      echo ${variable:gs/a/A/}     # pAth/AAAbcd (all A is replaced)

    Split the file name at each underscore: "echo ${(s._.)file}\n\n"
    Join expansion flag, opposite of the split flag.: |+
      array=(a b c d)
      echo ${(j.-.)array} # a-b-c-d

    Short if: |+
      if [[ ... ]] command
      if [[ ... ]] { command ... }

    Short for: |+
      for i ( word ... ) command
      for i ( word ... ) { command ... }
      for i in word ... ; command

    Short while/until: |+
      while [[ ... ]] { command ... }
      until [[ ... ]] { command ... }

    Use output of command, when using pipe is not possible: "<( command )\n\n"
    program needs to seek in output.: "=( command )\n"
...
