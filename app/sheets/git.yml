---
description: Generated sheet for git
edited: true
tags:
- community
- vcs
shortcuts:
- default:
  - To set your identity: |+
      git config --global user.name <name>
      git config --global user.email <email>
  - To set your editor: git config --global core.editor <editor>
  - To enable color: git config --global color.ui true
  - Stage all changes for commit: git add .
  - Edit previous commit message: git commit --amend
  - Change author of a commit: |
      git commit --amend --author="Author Name <email@address.com>"
  - check any signatures it finds and list them in its output: |
      git log --pretty="format:%h%G? %aN %s"
  - Delete branch: git branch -D <branch>
  - Get branch: git checkout<branch>
  - Get commit: git checkout <commit>
  - Get a file: git checkout <file>
  - Get by tag: git checkout <tag>
  - Manual apply changes: git cherry-pick
  - Remove untracked files: git clean
  - Commit and squash all: git commit --fixup && git rebase -i --autosquash
  - View differences: git diff viewer
  - Fetch (pull) all remotes.: git pull --all
  - Re-organize commits (rebase): git rebase -i
  - Reset current HEAD to the specified state: git reset HEAD <file>
  - Restore working tree files: git restore --source <branch>~1 <commit>
  - Revert some existing commits: git revert <commit>
  - Show stashed changes: git stash show
  - List Stashed changes: git stash list
  - Clean changes: git stash clear
  - Apply last stashed change: git stash apply
  - Apply last stashed change by index: git stash apply <index>
  - Store (stash) current dirty changes: git stash
  - List merged branchs: git branch --merged
  - List contributors: |
      # Example and alias ==> alias git_coauth='printf "Co-authored-by: %s" "$(git log --pretty=format:"%an <%ae>" -1000 | sort | uniq | fzf)" | pbcopy'
      printf "Co-authored-by: %s" "$(git log --pretty=format:"%an <%ae>" -1000 | sort | uniq | fzf)"
  - List modified files by someone: |
      # Example and alias ==> alias git_files_log="git log --name-status --author=mberrueta | sort | uniq | grep -w '[M|A|D]'"
      git_files_log="git log --name-status --author=<autor> | sort | uniq | grep -w '[M|A|D]'"
  - Graph branches log: |
      # Example and alias alias ==> git_log="git log --graph --pretty=format:'%C(auto)%h%d (%ci) %cn <%ce> %s'"
      git_log="git log --graph --pretty=format:'%C(auto)%h%d (%ci) %cn <%ce> %s'"
  - Remove all (except current) branches: |
      git branch -D $(git branch --merged)
  - Revert a file from another branch: |
      git show <branch>:<filepath> > <filepath>
